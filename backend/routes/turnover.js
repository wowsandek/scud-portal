const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const uploadDir = path.join(__dirname, '../uploads/turnover');
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ UTF-8
    const originalName = Buffer.from(file.originalname, 'latin1').toString('utf8');
    cb(null, uniqueSuffix + '-' + originalName);
  }
});

const upload = multer({
  storage: storage,
  limits: { fileSize: 20 * 1024 * 1024 }, // 20MB
  fileFilter: (req, file, cb) => {
    const allowed = [
      'application/pdf',
      'image/png',
      'image/jpeg',
      'application/vnd.ms-excel',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    ];
    if (allowed.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'));
    }
  }
});

// POST /api/turnover
router.post('/', upload.single('file'), async (req, res) => {
  const startTime = Date.now();
  
  console.log(`üîµ [UPLOAD] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç–∞`);
  console.log(`üîµ [UPLOAD] –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${new Date().toISOString()}`);
  console.log(`üîµ [UPLOAD] –§–∞–π–ª:`, req.file ? {
    originalname: req.file.originalname,
    size: req.file.size,
    mimetype: req.file.mimetype
  } : '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
  
  try {
    const { tenantId, month, year, amountNoVat, amountWithVat, receiptsCount } = req.body;
    console.log(`üîµ [UPLOAD] –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:`, { tenantId, month, year, amountNoVat, amountWithVat, receiptsCount });
    
    if (!tenantId || !month || !year || !amountNoVat || !amountWithVat || !receiptsCount || !req.file) {
      console.log(`üî¥ [UPLOAD] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:`, { tenantId, month, year, amountNoVat, amountWithVat, receiptsCount, hasFile: !!req.file });
      return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    
    const monthNum = parseInt(month);
    const yearNum = parseInt(year);
    if (monthNum < 1 || monthNum > 12) {
      console.log(`üî¥ [UPLOAD] –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –º–µ—Å—è—Ü: ${monthNum}`);
      return res.status(400).json({ error: '–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12' });
    }
    if (yearNum < 2020 || yearNum > 2030) {
      console.log(`üî¥ [UPLOAD] –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≥–æ–¥: ${yearNum}`);
      return res.status(400).json({ error: '–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2020 –¥–æ 2030' });
    }
    
    const originalName = Buffer.from(req.file.originalname, 'latin1').toString('utf8');
    console.log(`üîµ [UPLOAD] –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: ${originalName}`);

    // --- –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í PDF ---
    let pdfFilePath = null;
    const ext = path.extname(req.file.filename).toLowerCase();
    const excelOrWord = ['.xlsx', '.xls', '.docx', '.doc'].includes(ext);
    if (excelOrWord) {
      // –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
      const inputPath = req.file.path;
      // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è PDF
      const outputDir = path.dirname(inputPath);
      // –û–∂–∏–¥–∞–µ–º–æ–µ –∏–º—è PDF
      const pdfName = req.file.filename + '.pdf';
      const pdfFullPath = path.join(outputDir, pdfName);
      try {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ LibreOffice —Å –∞–ª—å–±–æ–º–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π
        const { execSync } = require('child_process');
        let convertCmd = '';
        if (['.xlsx', '.xls'].includes(ext)) {
          convertCmd = `libreoffice --headless --convert-to pdf:\"calc_pdf_Export:PageOrientation=2\" --outdir "${outputDir}" "${inputPath}"`;
        } else if (['.docx', '.doc'].includes(ext)) {
          convertCmd = `libreoffice --headless --convert-to pdf:\"writer_pdf_Export:PageOrientation=2\" --outdir "${outputDir}" "${inputPath}"`;
        } else {
          convertCmd = `libreoffice --headless --convert-to pdf --outdir "${outputDir}" "${inputPath}"`;
        }
        execSync(convertCmd);
        // –ù–∞–π—Ç–∏ PDF-—Ñ–∞–π–ª (LibreOffice –º–æ–∂–µ—Ç –¥–∞—Ç—å –∏–º—è –±–µ–∑ .xlsx/.docx)
        const baseName = path.basename(req.file.filename, ext);
        const possiblePdf = path.join(outputDir, baseName + '.pdf');
        if (fs.existsSync(possiblePdf)) {
          pdfFilePath = path.relative(path.join(__dirname, '..'), possiblePdf);
        } else if (fs.existsSync(pdfFullPath)) {
          pdfFilePath = path.relative(path.join(__dirname, '..'), pdfFullPath);
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PDF:', e);
      }
    }
    // --- –ö–û–ù–ï–¶ –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò ---

    // –°–±—Ä–æ—Å–∏—Ç—å isLatest —É –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç—á—ë—Ç–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
    console.log(`üîµ [UPLOAD] –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ isLatest –¥–ª—è –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ ${tenantId}, –ø–µ—Ä–∏–æ–¥ ${monthNum}/${yearNum}...`);
    const resetResult = await prisma.turnover.updateMany({
      where: {
        tenantId: parseInt(tenantId),
        month: monthNum,
        year: yearNum,
        isLatest: true
      },
      data: { isLatest: false }
    });
    console.log(`üîµ [UPLOAD] –°–±—Ä–æ—à–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: ${resetResult.count}`);

    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç (—Å—Ç–∞—Ä—ã–π —É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    console.log(`üîµ [UPLOAD] –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç...`);
    const turnover = await prisma.turnover.create({
      data: {
        tenantId: parseInt(tenantId),
        month: monthNum,
        year: yearNum,
        amountNoVat: parseFloat(amountNoVat),
        amountWithVat: parseFloat(amountWithVat),
        receiptsCount: parseInt(receiptsCount),
        fileName: originalName,
        filePath: path.relative(path.join(__dirname, '..'), req.file.path),
        fileSize: req.file.size,
        fileType: req.file.mimetype,
        approvalStatus: 'pending',
        isLatest: true,
        pdfFilePath: pdfFilePath || null
      }
    });

    const duration = Date.now() - startTime;
    console.log(`‚úÖ [UPLOAD] –¢–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ ${duration}ms`);
    console.log(`‚úÖ [UPLOAD] ID –æ—Ç—á—ë—Ç–∞: ${turnover.id}`);
    console.log(`‚úÖ [UPLOAD] –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä: ${tenantId}, –ø–µ—Ä–∏–æ–¥: ${monthNum}/${yearNum}`);
    console.log(`‚úÖ [UPLOAD] –°—Ç–∞—Ç—É—Å: ${turnover.approvalStatus}`);

    res.json({ success: true, turnover });
  } catch (err) {
    const duration = Date.now() - startTime;
    console.error(`üî¥ [UPLOAD] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç–∞ –∑–∞ ${duration}ms:`, err);
    console.error(`üî¥ [UPLOAD] Stack trace:`, err.stack);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// GET /api/turnover/tenant/:tenantId
router.get('/tenant/:tenantId', async (req, res) => {
  try {
    const { tenantId } = req.params;
    const turnovers = await prisma.turnover.findMany({
      where: {
        tenantId: parseInt(tenantId)
      },
      orderBy: {
        createdAt: 'desc'
      },
      include: {
        tenant: {
          select: {
            id: true,
            name: true
          }
        }
      }
    });
    res.json(turnovers);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// GET /api/turnover/tenant/:tenantId/chart/:year
router.get('/tenant/:tenantId/chart/:year', async (req, res) => {
  try {
    const { tenantId, year } = req.params;
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ approved –æ—Ç—á—ë—Ç—ã –∑–∞ –≥–æ–¥
    const turnovers = await prisma.turnover.findMany({
      where: {
        tenantId: parseInt(tenantId),
        year: parseInt(year),
        approvalStatus: 'approved'
      },
      orderBy: {
        month: 'asc'
      }
    });
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π approved –æ—Ç—á—ë—Ç (–ø–æ updatedAt)
    const latestByMonth = {};
    turnovers.forEach(t => {
      if (!latestByMonth[t.month] || new Date(t.updatedAt) > new Date(latestByMonth[t.month].updatedAt)) {
        latestByMonth[t.month] = t;
      }
    });
    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å–µ—Ö 12 –º–µ—Å—è—Ü–µ–≤
    const chartData = Array.from({ length: 12 }, (_, index) => {
      const month = index + 1;
      const turnover = latestByMonth[month];
      return {
        month,
        monthName: ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                   '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'][index],
        amountNoVat: turnover ? turnover.amountNoVat : 0,
        amountWithVat: turnover ? turnover.amountWithVat : 0,
        receiptsCount: turnover ? turnover.receiptsCount : 0,
        hasData: !!turnover
      };
    });
    res.json(chartData);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// GET /api/turnover/all-tenants/:year/:month - –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç –≤—Å–µ—Ö –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
router.get('/all-tenants/:year/:month', async (req, res) => {
  try {
    const { year, month } = req.params;
    const yearNum = parseInt(year);
    const monthNum = parseInt(month);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const tenants = await prisma.tenant.findMany({
      select: {
        id: true,
        name: true
      }
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—á—ë—Ç—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (—É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –∏ pending)
    const turnovers = await prisma.turnover.findMany({
      where: {
        year: yearNum,
        month: monthNum,
        OR: [
          { approvalStatus: 'approved' },
          { approvalStatus: 'pending', isLatest: true }
        ]
      },
      include: {
        tenant: {
          select: {
            id: true,
            name: true
          }
        }
      }
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ tenantId –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: pending > approved
    const latestTurnovers = {};
    turnovers.forEach(turnover => {
      const key = turnover.tenantId;
      if (!latestTurnovers[key] || 
          (turnover.approvalStatus === 'pending' && latestTurnovers[key].approvalStatus === 'approved') ||
          (turnover.approvalStatus === latestTurnovers[key].approvalStatus && turnover.updatedAt > latestTurnovers[key].updatedAt)) {
        latestTurnovers[key] = turnover;
      }
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤—Å–µ—Ö –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤
    const result = tenants.map(tenant => {
      const turnover = latestTurnovers[tenant.id];
      return {
        tenantId: tenant.id,
        tenantName: tenant.name,
        hasSubmitted: !!turnover, // <--- –¥–æ–±–∞–≤–ª–µ–Ω–æ
        amountNoVat: turnover?.amountNoVat || 0,
        amountWithVat: turnover?.amountWithVat || 0,
        receiptsCount: turnover?.receiptsCount || 0,
        fileName: turnover?.fileName || null,
        filePath: turnover?.filePath || null,
        submittedAt: turnover?.createdAt || null,
        updatedAt: turnover?.updatedAt || null,
        approvalStatus: turnover?.approvalStatus || null,
        turnover: turnover || null
      };
    });
    
    res.json({
      period: { year: yearNum, month: monthNum },
      totalTenants: tenants.length,
      submittedCount: Object.keys(latestTurnovers).length,
      pendingCount: tenants.length - Object.keys(latestTurnovers).length,
      data: result
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// GET /api/turnover/statistics/:year - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ–¥–∞–º
router.get('/statistics/:year', async (req, res) => {
  try {
    const { year } = req.params;
    const yearNum = parseInt(year);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const tenants = await prisma.tenant.findMany({
      select: {
        id: true,
        name: true
      }
    });
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç –∑–∞ –≤–µ—Å—å –≥–æ–¥
    const turnovers = await prisma.turnover.findMany({
      where: {
        year: yearNum
      },
      include: {
        tenant: {
          select: {
            id: true,
            name: true
          }
        }
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Å—è—Ü–∞–º
    const monthlyStats = Array.from({ length: 12 }, (_, index) => {
      const month = index + 1;
      const monthTurnovers = turnovers.filter(t => t.month === month);
      
      return {
        month,
        monthName: ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                   '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'][index],
        totalTenants: tenants.length,
        submittedCount: monthTurnovers.length,
        pendingCount: tenants.length - monthTurnovers.length,
        totalAmount: monthTurnovers.reduce((sum, t) => sum + t.amountWithVat, 0),
        totalReceipts: monthTurnovers.reduce((sum, t) => sum + t.receiptsCount, 0)
      };
    });
    
    res.json({
      year: yearNum,
      totalTenants: tenants.length,
      totalTurnover: turnovers.reduce((sum, t) => sum + t.amountWithVat, 0),
      totalReceipts: turnovers.reduce((sum, t) => sum + t.receiptsCount, 0),
      monthlyStats
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// GET /api/turnover/pending-approval - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç—ã –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
router.get('/pending-approval', async (req, res) => {
  try {
    const turnovers = await prisma.turnover.findMany({
      where: {
        approvalStatus: 'pending',
        isLatest: true
      },
      include: {
        tenant: {
          select: {
            id: true,
            name: true
          }
        }
      },
      orderBy: {
        updatedAt: 'desc'
      }
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ tenantId –∏ –º–µ—Å—è—Ü—É/–≥–æ–¥—É, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –∑–∞–ø–∏—Å–∏
    const latestTurnovers = turnovers.reduce((acc, turnover) => {
      const key = `${turnover.tenantId}-${turnover.month}-${turnover.year}`;
      if (!acc[key] || acc[key].updatedAt < turnover.updatedAt) {
        acc[key] = turnover;
      }
      return acc;
    }, {});
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤
    const result = Object.values(latestTurnovers);
    
    res.json(result);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// PUT /api/turnover/:id/approve - –£—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç—á–µ—Ç
router.put('/:id/approve', async (req, res) => {
  const startTime = Date.now();
  const { id } = req.params;
  
  console.log(`üîµ [APPROVE] –ù–∞—á–∏–Ω–∞–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ ID: ${id}`);
  console.log(`üîµ [APPROVE] –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${new Date().toISOString()}`);
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç, –∫–æ—Ç–æ—Ä—ã–π —É—Ç–≤–µ—Ä–∂–¥–∞–µ–º
    console.log(`üîµ [APPROVE] –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç ID: ${id} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...`);
    const turnoverToApprove = await prisma.turnover.findUnique({
      where: { id: parseInt(id) }
    });
    
    if (!turnoverToApprove) {
      console.log(`üî¥ [APPROVE] –û—Ç—á—ë—Ç ID: ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      return res.status(404).json({ error: '–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    console.log(`üîµ [APPROVE] –û—Ç—á—ë—Ç –Ω–∞–π–¥–µ–Ω:`, {
      id: turnoverToApprove.id,
      tenantId: turnoverToApprove.tenantId,
      month: turnoverToApprove.month,
      year: turnoverToApprove.year,
      currentStatus: turnoverToApprove.approvalStatus,
      fileName: turnoverToApprove.fileName
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –æ—Ç—á—ë—Ç–æ–≤ –∑–∞ —ç—Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥
    console.log(`üîµ [APPROVE] –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–∏—Ö –æ—Ç—á—ë—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ ${turnoverToApprove.month}/${turnoverToApprove.year} –¥–ª—è –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ ${turnoverToApprove.tenantId}...`);
    
    const resetResult = await prisma.turnover.updateMany({
      where: {
        tenantId: turnoverToApprove.tenantId,
        month: turnoverToApprove.month,
        year: turnoverToApprove.year,
        id: { not: parseInt(id) }
      },
      data: {
        approvalStatus: 'not_approved'
      }
    });
    
    console.log(`üîµ [APPROVE] –°–±—Ä–æ—à–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: ${resetResult.count}`);
    
    // –£—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç
    console.log(`üîµ [APPROVE] –£—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç—á—ë—Ç ID: ${id}...`);
    const turnover = await prisma.turnover.update({
      where: {
        id: parseInt(id)
      },
      data: {
        approvalStatus: 'approved'
      },
      include: {
        tenant: {
          select: {
            id: true,
            name: true
          }
        }
      }
    });
    
    const duration = Date.now() - startTime;
    console.log(`‚úÖ [APPROVE] –û—Ç—á—ë—Ç ID: ${id} —É—Å–ø–µ—à–Ω–æ —É—Ç–≤–µ—Ä–∂–¥—ë–Ω –∑–∞ ${duration}ms`);
    console.log(`‚úÖ [APPROVE] –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${turnover.approvalStatus}`);
    console.log(`‚úÖ [APPROVE] –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä: ${turnover.tenant.name} (ID: ${turnover.tenant.id})`);
    
    res.json({ success: true, turnover });
  } catch (err) {
    const duration = Date.now() - startTime;
    console.error(`üî¥ [APPROVE] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ ID: ${id} –∑–∞ ${duration}ms:`, err);
    console.error(`üî¥ [APPROVE] Stack trace:`, err.stack);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// PUT /api/turnover/:id/reject - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç—á–µ—Ç
router.put('/:id/reject', async (req, res) => {
  const startTime = Date.now();
  const { id } = req.params;
  
  console.log(`üîµ [REJECT] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ ID: ${id}`);
  console.log(`üîµ [REJECT] –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${new Date().toISOString()}`);
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log(`üîµ [REJECT] –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç ID: ${id} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...`);
    const turnoverToReject = await prisma.turnover.findUnique({
      where: { id: parseInt(id) }
    });
    
    if (!turnoverToReject) {
      console.log(`üî¥ [REJECT] –û—Ç—á—ë—Ç ID: ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      return res.status(404).json({ error: '–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    console.log(`üîµ [REJECT] –û—Ç—á—ë—Ç –Ω–∞–π–¥–µ–Ω:`, {
      id: turnoverToReject.id,
      tenantId: turnoverToReject.tenantId,
      month: turnoverToReject.month,
      year: turnoverToReject.year,
      currentStatus: turnoverToReject.approvalStatus,
      fileName: turnoverToReject.fileName
    });
    
    // –û—Ç–∫–ª–æ–Ω—è–µ–º –æ—Ç—á—ë—Ç
    console.log(`üîµ [REJECT] –û—Ç–∫–ª–æ–Ω—è–µ–º –æ—Ç—á—ë—Ç ID: ${id}...`);
    const turnover = await prisma.turnover.update({
      where: {
        id: parseInt(id)
      },
      data: {
        approvalStatus: 'rejected'
      },
      include: {
        tenant: {
          select: {
            id: true,
            name: true
          }
        }
      }
    });
    
    const duration = Date.now() - startTime;
    console.log(`‚úÖ [REJECT] –û—Ç—á—ë—Ç ID: ${id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω –∑–∞ ${duration}ms`);
    console.log(`‚úÖ [REJECT] –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${turnover.approvalStatus}`);
    console.log(`‚úÖ [REJECT] –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä: ${turnover.tenant.name} (ID: ${turnover.tenant.id})`);
    
    res.json({ success: true, turnover });
  } catch (err) {
    const duration = Date.now() - startTime;
    console.error(`üî¥ [REJECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ ID: ${id} –∑–∞ ${duration}ms:`, err);
    console.error(`üî¥ [REJECT] Stack trace:`, err.stack);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// PUT /api/turnover/:id - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞ (—Ç–æ–ª—å–∫–æ pending/approved)
router.put('/:id', async (req, res) => {
  const startTime = Date.now();
  const { id } = req.params;
  const { amountWithVat, amountNoVat, receiptsCount } = req.body;

  console.log(`üîµ [EDIT] –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ ID: ${id}`);
  console.log(`üîµ [EDIT] –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${new Date().toISOString()}`);
  console.log(`üîµ [EDIT] –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:`, { amountWithVat, amountNoVat, receiptsCount });

  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç
    console.log(`üîµ [EDIT] –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç ID: ${id} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...`);
    const turnover = await prisma.turnover.findUnique({ where: { id: parseInt(id) } });
    if (!turnover) {
      console.log(`üî¥ [EDIT] –û—Ç—á—ë—Ç ID: ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      return res.status(404).json({ error: '–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    console.log(`üîµ [EDIT] –û—Ç—á—ë—Ç –Ω–∞–π–¥–µ–Ω:`, {
      id: turnover.id,
      tenantId: turnover.tenantId,
      month: turnover.month,
      year: turnover.year,
      currentStatus: turnover.approvalStatus,
      currentAmountWithVat: turnover.amountWithVat,
      currentAmountNoVat: turnover.amountNoVat,
      currentReceiptsCount: turnover.receiptsCount
    });
    
    if (!["pending", "approved"].includes(turnover.approvalStatus)) {
      console.log(`üî¥ [EDIT] –û—Ç—á—ë—Ç ID: ${id} –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å: ${turnover.approvalStatus}`);
      return res.status(400).json({ error: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ pending –∏–ª–∏ approved –æ—Ç—á—ë—Ç—ã' });
    }

    console.log(`üîµ [EDIT] –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞ ID: ${id}...`);
    const updated = await prisma.turnover.update({
      where: { id: parseInt(id) },
      data: {
        amountWithVat: amountWithVat !== undefined ? parseFloat(amountWithVat) : turnover.amountWithVat,
        amountNoVat: amountNoVat !== undefined ? parseFloat(amountNoVat) : turnover.amountNoVat,
        receiptsCount: receiptsCount !== undefined ? parseInt(receiptsCount) : turnover.receiptsCount
      }
    });
    
    const duration = Date.now() - startTime;
    console.log(`‚úÖ [EDIT] –û—Ç—á—ë—Ç ID: ${id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –∑–∞ ${duration}ms`);
    console.log(`‚úÖ [EDIT] –ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:`, {
      amountWithVat: updated.amountWithVat,
      amountNoVat: updated.amountNoVat,
      receiptsCount: updated.receiptsCount
    });
    
    res.json({ success: true, turnover: updated });
  } catch (err) {
    const duration = Date.now() - startTime;
    console.error(`üî¥ [EDIT] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ ID: ${id} –∑–∞ ${duration}ms:`, err);
    console.error(`üî¥ [EDIT] Stack trace:`, err.stack);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// GET /api/turnover/:id/download - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –æ—Ç—á—ë—Ç–∞
router.get('/:id/download', async (req, res) => {
  try {
    const { id } = req.params;
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç
    const turnover = await prisma.turnover.findUnique({
      where: { id: parseInt(id) }
    });
    
    if (!turnover) {
      return res.status(404).json({ error: '–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    if (!turnover.filePath) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const filePath = path.join(__dirname, '..', turnover.filePath);
    if (!fs.existsSync(filePath)) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    res.download(filePath, turnover.fileName);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞' });
  }
});

// GET /api/turnover/:id/view - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª –æ—Ç—á—ë—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
router.get('/:id/view', async (req, res) => {
  try {
    const { id } = req.params;
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç
    const turnover = await prisma.turnover.findUnique({
      where: { id: parseInt(id) }
    });
    
    if (!turnover) {
      return res.status(404).json({ error: '–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    if (!turnover.filePath) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const filePath = path.join(__dirname, '..', turnover.filePath);
    if (!fs.existsSync(filePath)) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞
    const ext = path.extname(turnover.fileName).toLowerCase();
    let contentType = 'application/octet-stream';
    
    switch (ext) {
      case '.pdf':
        contentType = 'application/pdf';
        break;
      case '.png':
        contentType = 'image/png';
        break;
      case '.jpg':
      case '.jpeg':
        contentType = 'image/jpeg';
        break;
      case '.xlsx':
        contentType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
        break;
      case '.xls':
        contentType = 'application/vnd.ms-excel';
        break;
      default:
        contentType = 'application/octet-stream';
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    res.setHeader('Content-Type', contentType);
    res.setHeader('Content-Security-Policy', "frame-ancestors 'self' http://localhost:3000");
    res.setHeader('Cross-Origin-Resource-Policy', 'cross-origin');
    res.setHeader('Access-Control-Allow-Origin', 'http://localhost:3000');
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    res.sendFile(filePath);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ñ–∞–π–ª–∞' });
  }
});

// GET /api/turnover/:id/view-pdf - –ü—Ä–æ—Å–º–æ—Ç—Ä PDF-–≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–∞
router.get('/:id/view-pdf', async (req, res) => {
  try {
    const { id } = req.params;
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç
    const turnover = await prisma.turnover.findUnique({
      where: { id: parseInt(id) }
    });
    
    if (!turnover) {
      return res.status(404).json({ error: '–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    if (!turnover.pdfFilePath) {
      return res.status(404).json({ error: 'PDF-–≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ PDF —Ñ–∞–π–ª–∞
    const filePath = path.join(__dirname, '..', turnover.pdfFilePath);
    if (!fs.existsSync(filePath)) {
      return res.status(404).json({ error: 'PDF-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PDF –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Security-Policy', "frame-ancestors 'self' http://localhost:3000");
    res.setHeader('Cross-Origin-Resource-Policy', 'cross-origin');
    res.setHeader('Access-Control-Allow-Origin', 'http://localhost:3000');
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
    res.sendFile(filePath);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ PDF:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ PDF' });
  }
});

module.exports = router; 